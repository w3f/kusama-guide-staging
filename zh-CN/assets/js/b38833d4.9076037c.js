(self.webpackChunk=self.webpackChunk||[]).push([[9062],{3905:(e,t,a)=>{"use strict";a.d(t,{Zo:()=>h,kt:()=>c});var n=a(67294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var s=n.createContext({}),d=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},h=function(e){var t=d(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,h=l(e,["components","mdxType","originalType","parentName"]),m=d(a),c=o,u=m["".concat(s,".").concat(c)]||m[c]||p[c]||i;return a?n.createElement(u,r(r({ref:t},h),{},{components:a})):n.createElement(u,r({ref:t},h))}));function c(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=a.length,r=new Array(i);r[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,r[1]=l;for(var d=2;d<i;d++)r[d]=a[d];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},2774:(e,t,a)=>{"use strict";a.r(t),a.d(t,{frontMatter:()=>l,contentTitle:()=>s,metadata:()=>d,toc:()=>h,default:()=>m});var n=a(22122),o=a(19756),i=(a(67294),a(3905)),r=["components"],l={id:"learn-phragmen",title:"Sequential Phragm\xe9n Method",sidebar_label:"Sequential Phragm\xe9n Method",description:"Learn about the election method used on Polkadot.",slug:"../learn-phragmen"},s=void 0,d={unversionedId:"learn/learn-phragmen",id:"learn/learn-phragmen",isDocsHomePage:!1,title:"Sequential Phragm\xe9n Method",description:"Learn about the election method used on Polkadot.",source:"@site/../docs/learn/learn-phragmen.md",sourceDirName:"learn",slug:"/learn-phragmen",permalink:"/zh-CN/docs/learn-phragmen",editUrl:"https://github.com/w3f/polkadot-wiki/edit/master/docs/learn/learn-phragmen.md",tags:[],version:"current",lastUpdatedBy:"Danny Salman",lastUpdatedAt:1632859113,formattedLastUpdatedAt:"2021/9/28",frontMatter:{id:"learn-phragmen",title:"Sequential Phragm\xe9n Method",sidebar_label:"Sequential Phragm\xe9n Method",description:"Learn about the election method used on Polkadot.",slug:"../learn-phragmen"}},h=[{value:"What is the sequential Phragm\xe9n method?",id:"what-is-the-sequential-phragm\xe9n-method",children:[{value:"BalPhragmms",id:"balphragmms",children:[]}]},{value:"Algorithm",id:"algorithm",children:[]},{value:"Where is the Phragm\xe9n method used in Polkadot?",id:"where-is-the-phragm\xe9n-method-used-in-polkadot",children:[{value:"NPoS: Validator Elections",id:"npos-validator-elections",children:[]},{value:"Council Elections",id:"council-elections",children:[]}]},{value:"What does it mean for node operators?",id:"what-does-it-mean-for-node-operators",children:[]},{value:"Understanding Phragm\xe9n",id:"understanding-phragm\xe9n",children:[{value:"Basic Phragm\xe9n",id:"basic-phragm\xe9n",children:[]},{value:"Rationale",id:"rationale",children:[]},{value:"Algorithm",id:"algorithm-1",children:[]},{value:"Example",id:"example",children:[]},{value:"Weighted Phragm\xe9n",id:"weighted-phragm\xe9n",children:[]},{value:"Rationale",id:"rationale-1",children:[]},{value:"Algorithm",id:"algorithm-2",children:[]},{value:"Example",id:"example-1",children:[]}]},{value:"Optimizations",id:"optimizations",children:[{value:"High-Level Description",id:"high-level-description",children:[]},{value:"Rationale for Minimizing the Number of Validators Per Nominator",id:"rationale-for-minimizing-the-number-of-validators-per-nominator",children:[]},{value:"Rationale for Maintaining an Even Distribution of Stake",id:"rationale-for-maintaining-an-even-distribution-of-stake",children:[]},{value:"Rationale for Reducing Block Computing Time",id:"rationale-for-reducing-block-computing-time",children:[]}]},{value:"External Resources",id:"external-resources",children:[]}],p={toc:h};function m(e){var t=e.components,a=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"what-is-the-sequential-phragm\xe9n-method"},"What is the sequential Phragm\xe9n method?"),(0,i.kt)("p",null,"The sequential Phragm\xe9n method is a multi-winner election method introduced by Edvard Phragm\xe9n in\nthe 1890s. While sequential Phragm\xe9n is currently in use on Polkadot and Kusama, an improvement on\nthe sequential Phragm\xe9n method named ",(0,i.kt)("a",{parentName:"p",href:"#external-resources"},"BalPhragmms")," will be used in the future."),(0,i.kt)("p",null,"The quote below taken from the reference ",(0,i.kt)("a",{parentName:"p",href:"#external-resources"},"Phragm\xe9n paper")," sums up the purpose\nof the sequential Phragm\xe9n method:"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"The problem that Phragm\xe9n\u2019s methods try to solve is that of electing a set of a given numbers of\npersons from a larger set of candidates. Phragm\xe9n discussed this in the context of a parliamentary\nelection in a multi-member constituency; the same problem can, of course, also occur in local\nelections, but also in many other situations such as electing a board or a committee in an\norganization.")),(0,i.kt)("h3",{id:"balphragmms"},"BalPhragmms"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"BalPhragmms")," is a new election rule inspired by Phragm\xe9n, and aims to achieve a constant-factor approximation guarantee for the ",(0,i.kt)("em",{parentName:"p"},"maximin support objective")," and the closely related ",(0,i.kt)("em",{parentName:"p"},"proportional justified representation")," (PJR) property. The maximin support objective is based on maximizing the support of the least-supported elected candidate. The PJR property considers proportionality of the voter\u2019s decision power."),(0,i.kt)("p",null,"The security of a distributed and decentralized system such as Polkadot is directly related to the goal of avoiding ",(0,i.kt)("em",{parentName:"p"},"overrepresentation")," of any minority. This is a stark contrast to classical approaches to proportional representation axioms, which only seek to avoid underrepresentation."),(0,i.kt)("p",null,"Sequential Phragm\xe9n and MMS are two efficient election rules that both achieve PJR."),(0,i.kt)("p",null,"Previously, Polkadot employed the sequential Phragm\xe9n (",(0,i.kt)("inlineCode",{parentName:"p"},"seqPhragmen"),") method for validator and council elections. Although ",(0,i.kt)("inlineCode",{parentName:"p"},"seqPhramen")," is very fast with a runtime of ",(0,i.kt)("inlineCode",{parentName:"p"},"O(|E| * k)"),", it does not provide constant-factor approximation for the maximin support problem."),(0,i.kt)("p",null,"In contrast, ",(0,i.kt)("inlineCode",{parentName:"p"},"MMS")," is another standard greedy algorithm that simultaneously achieves the PJR property and provides a 2-factor approximation for maximin support, although with a considerably slower runtime of ",(0,i.kt)("inlineCode",{parentName:"p"},"O(Bal * |C| * k)")," where Bal is the time complexity of computing a balanced weight vector."),(0,i.kt)("p",null,"We introduce a new heuristic inspired by ",(0,i.kt)("inlineCode",{parentName:"p"},"seqPhragmen"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"PhragMMS"),", which maintains a comparable runtime to ",(0,i.kt)("inlineCode",{parentName:"p"},"seqPhragmen")," and achieves maximin support and PJR. It is a 3.15-approximation algorithm with a time complexity of ",(0,i.kt)("inlineCode",{parentName:"p"},"O(Bal * k)"),". This is the fastest known algorithm to achieve a constant-factor guarantee for maximin support."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"BalPhragmms")," is an iterative greedy algorithm that starts with an empty committee and alternates between the ",(0,i.kt)("inlineCode",{parentName:"p"},"Phragmms")," heuristic for inserting a new candidate and ",(0,i.kt)("em",{parentName:"p"},"rebalancing")," by replacing the weight vector with a balanced one. In addition to satisfying the PJR property, it also executes in ",(0,i.kt)("inlineCode",{parentName:"p"},"O(Bal * k)")," time, assuming ",(0,i.kt)("inlineCode",{parentName:"p"},"Bal = \u2126(|E| * log k)"),". This can be further improved such that each iteration can be made to run in ",(0,i.kt)("inlineCode",{parentName:"p"},"O(|E| + Bal)"),"."),(0,i.kt)("p",null,"The computation is executed by off-chain workers privately and separately from block production, and the validators only need to submit and verify the solutions on-chain. Observing on-chain, only one solution needs to be tracked at any given time, and a block producer can submit new solution ",(0,i.kt)("em",{parentName:"p"},"(A, w)")," in the block only if the block passes all three of these checks:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Feasibility"),(0,i.kt)("li",{parentName:"ol"},"Balancedness",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"supp_w(A) > supp_w'(A')")))),(0,i.kt)("li",{parentName:"ol"},"Local optimality",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"If ",(0,i.kt)("em",{parentName:"li"},"(A, w)")," passes the tests, then it replaces ",(0,i.kt)("em",{parentName:"li"},"(A', w')")," as the current tentative winner. The official winning solution is declared at the end of the election window.")))),(0,i.kt)("p",null,"A powerful feature of this algorithm is the fact that both its approximation guarantee for maxim support and the above checks passing can be efficiently verified. This allows for a more scalable solution for secure and proportional committee elections. ",(0,i.kt)("inlineCode",{parentName:"p"},"Balphragmms")," can be seen as a natural complication of the ",(0,i.kt)("inlineCode",{parentName:"p"},"seqPhragmen")," algorithm, which always grants higher score values to candidates and thus inserting them with higher support values."),(0,i.kt)("h2",{id:"algorithm"},"Algorithm"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"BalPhragmms")," algorithm iterates through the available seats, starting with an empty committee of size ",(0,i.kt)("inlineCode",{parentName:"p"},"k"),":"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Initialize an empty committee ",(0,i.kt)("inlineCode",{parentName:"li"},"A")," and a weighted edge vector ",(0,i.kt)("inlineCode",{parentName:"li"},"w"),"."),(0,i.kt)("li",{parentName:"ol"},"Find the candidate with the highest score ",(0,i.kt)("inlineCode",{parentName:"li"},"cmax")," and its threshold or max score ",(0,i.kt)("inlineCode",{parentName:"li"},"tmax")," with ",(0,i.kt)("inlineCode",{parentName:"li"},"MaxScore(A, w)"),"."),(0,i.kt)("li",{parentName:"ol"},"Optionally, call ",(0,i.kt)("inlineCode",{parentName:"li"},"Insert(A, w, cmax, tmax)")," to return a feasible solution ",(0,i.kt)("inlineCode",{parentName:"li"},"(A' + c', w')"),", where c' is a new, unelected candidate. ",(0,i.kt)("inlineCode",{parentName:"li"},"Insert")," ensures that we avoid increasing the number of validators with support below ",(0,i.kt)("inlineCode",{parentName:"li"},"tmax"),"."),(0,i.kt)("li",{parentName:"ol"},"Update the partial solution ",(0,i.kt)("inlineCode",{parentName:"li"},"(A, w)"),"."),(0,i.kt)("li",{parentName:"ol"},"Rebalance by replacing ",(0,i.kt)("inlineCode",{parentName:"li"},"w")," with a balanced weight vector for ",(0,i.kt)("inlineCode",{parentName:"li"},"A"),"."),(0,i.kt)("li",{parentName:"ol"},"If there are more seats available, go back to step 2. Otherwise, return the balanced solution ",(0,i.kt)("inlineCode",{parentName:"li"},"(A, w)"),".")),(0,i.kt)("h2",{id:"where-is-the-phragm\xe9n-method-used-in-polkadot"},"Where is the Phragm\xe9n method used in Polkadot?"),(0,i.kt)("h3",{id:"npos-validator-elections"},"NPoS: Validator Elections"),(0,i.kt)("p",null,"The sequential Phragm\xe9n method is used in the Nominated Proof-of-Stake scheme to elect validators\nbased on their own self-stake and the stake that is voted to them from nominators. It also tries to\nequalize the weights between the validators after each election round. Since validators are paid\nequally in Polkadot, it is important that the stake behind each validator is spread out. Polkadot\ntries to optimize three metrics in its elections:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Maximize the total amount at stake."),(0,i.kt)("li",{parentName:"ol"},"Maximize the stake behind the minimally staked validator."),(0,i.kt)("li",{parentName:"ol"},"Minimize the variance of the stake in the set.")),(0,i.kt)("h4",{id:"off-chain-phragm\xe9n"},"Off-Chain Phragm\xe9n"),(0,i.kt)("p",null,"Given the large set of nominators and validators, Phragm\xe9n's method is a difficult optimization\nproblem. Polkadot uses off-chain workers to compute the result off-chain and submit a transaction to\npropose the set of winners. The reason for performing this computation off-chain is to keep a\nconstant block time of six seconds and prevent long block times at the end of each era, when the\nvalidator election takes place."),(0,i.kt)("p",null,"Because certain user actions, like changing nominations, can change the outcome of the Phragm\xe9n\nelection, the system forbids calls to these functions for the last quarter of the session before an\nera change. These functions are not permitted:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"bondExtra")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"unbond")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"withdrawUnbonded")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"validate")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"nominate")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"chill")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"payoutStakers")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"rebond"))),(0,i.kt)("h3",{id:"council-elections"},"Council Elections"),(0,i.kt)("p",null,"The Phragm\xe9n method is also used in the council election mechanism. When you vote for council\nmembers, you can select up to 16 different candidates, and then place a reserved bond as the weight\nof your vote. Phragm\xe9n will run once on every election to determine the top candidates to assume\ncouncil positions and then again amongst the top candidates to equalize the weight of the votes\nbehind them as much as possible."),(0,i.kt)("h2",{id:"what-does-it-mean-for-node-operators"},"What does it mean for node operators?"),(0,i.kt)("p",null,"Phragm\xe9n is something that will run in the background and requires no extra effort from you.\nHowever, it is good to understand how it works since it means that not all the stake you've been\nnominated will end up on your validator after an election. Nominators are likely to nominate a few\ndifferent validators that they trust to do a good job operating their nodes."),(0,i.kt)("p",null,"You can use the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/kianenigma/offline-phragmen"},"offline-phragm\xe9n")," script for\npredicting the outcome of a validator election ahead of a new election."),(0,i.kt)("h2",{id:"understanding-phragm\xe9n"},"Understanding Phragm\xe9n"),(0,i.kt)("p",null,"This section explains the sequential Phragm\xe9n method in-depth and walks through examples."),(0,i.kt)("h3",{id:"basic-phragm\xe9n"},"Basic Phragm\xe9n"),(0,i.kt)("h3",{id:"rationale"},"Rationale"),(0,i.kt)("p",null,"In order to understand the Weighted Phragm\xe9n method, we must first understand the basic Phragm\xe9n\nmethod. There must be some group of candidates, a group of seats they are vying for (which is less\nthan the size of the group of candidates), and some group of voters. The voters can cast an approval\nvote - that is, they can signal approval for any subset of the candidates."),(0,i.kt)("p",null,"The subset should be a minimum size of one (i.e., one cannot vote for no candidates) and a maximum\nsize of one less than the number of candidates (i.e., one cannot vote for all candidates). Users are\nallowed to vote for all or no candidates, but this will not have an effect on the final result, and\nso votes of this nature are meaningless."),(0,i.kt)("p",null,'Note that in this example, all voters are assumed to have equal say (that is, their vote does not\ncount more or less than any other votes). The weighted case will be considered later. However,\nweighting can be "simulated" by having multiple voters vote for the same slate of candidates. For\ninstance, five people voting for a particular candidate is mathematically the same as a single\nperson with weight ',(0,i.kt)("inlineCode",{parentName:"p"},"5")," voting for that candidate."),(0,i.kt)("p",null,'The particular algorithm we call here the "Basic Phragm\xe9n" was first described by Brill ',(0,i.kt)("em",{parentName:"p"},"et al.")," in\ntheir paper\n",(0,i.kt)("a",{parentName:"p",href:"https://aaai.org/ocs/index.php/AAAI/AAAI17/paper/download/14757/13791"},'"Phragm\xe9n\u2019s Voting Methods and Justified Representation"'),"."),(0,i.kt)("h3",{id:"algorithm-1"},"Algorithm"),(0,i.kt)("p",null,"The Phragm\xe9n method will iterate, selecting one seat at a time, according to the following rules:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Candidates submit their ballots, marking which candidates they approve. Ballots will not be\nmodified after submission."),(0,i.kt)("li",{parentName:"ol"},"An initial load of 0 is set for each ballot."),(0,i.kt)("li",{parentName:"ol"},"The candidate who wins the next available seat is the one where the ballots of their supporters\nwould have the ",(0,i.kt)("em",{parentName:"li"},"least average (mean) cost")," if that candidate wins."),(0,i.kt)("li",{parentName:"ol"},"The ",(0,i.kt)("em",{parentName:"li"},"n")," ballots that approved that winning candidate get ",(0,i.kt)("em",{parentName:"li"},"1/n")," added to their load."),(0,i.kt)("li",{parentName:"ol"},"The load of all ballots that supported the winner of this round are averaged out so that they are\nequal."),(0,i.kt)("li",{parentName:"ol"},"If there are any more seats, go back to step 3. Otherwise, the selection ends.")),(0,i.kt)("h3",{id:"example"},"Example"),(0,i.kt)("p",null,"Let's walk through an example with four candidates vying for three seats, and five voters."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Open Seats: 3\n\nCandidates:   A B C D  L0\n-------------------------\nVoter V1:       X      0\nVoter V2:         X X  0\nVoter V3:       X   X  0\nVoter V4:     X X      0\nVoter V5:       X X X  0\n")),(0,i.kt)("p",null,"In this example, we can see that voter ",(0,i.kt)("inlineCode",{parentName:"p"},"V1")," approves only of candidate ",(0,i.kt)("inlineCode",{parentName:"p"},"B"),", voter ",(0,i.kt)("inlineCode",{parentName:"p"},"V2")," approves of\ncandidates ",(0,i.kt)("inlineCode",{parentName:"p"},"C")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"D"),", etc. Voters can approve any number of candidates between 1 and\n",(0,i.kt)("inlineCode",{parentName:"p"},"number_of_candidates - 1"),'. An initial "load" of ',(0,i.kt)("inlineCode",{parentName:"p"},"0")," is set for each ballot (",(0,i.kt)("inlineCode",{parentName:"p"},"L0")," = load after round\n",(0,i.kt)("inlineCode",{parentName:"p"},"0"),', i.e., the "round" before the first round). We shall see shortly how this load is updated and\nused to select candidates.'),(0,i.kt)("p",null,'We will now run through an iterative algorithm, with each iteration corresponding to one "seat".\nSince there are three seats, we will walk through three rounds.'),(0,i.kt)("p",null,"For the first round, the winner is simply going to be the candidate with the most votes. Since all\nloads are equal, the lowest average load will be the candidate with the highest n, since ",(0,i.kt)("inlineCode",{parentName:"p"},"1/n")," will\nget smaller as ",(0,i.kt)("inlineCode",{parentName:"p"},"n")," increases. For this first example round, for instance, candidate ",(0,i.kt)("inlineCode",{parentName:"p"},"A")," had only one\nballot vote for them. Thus, the average load for candidate A is ",(0,i.kt)("inlineCode",{parentName:"p"},"1/1"),", or 1. Candidate C has two\nballots approving of them, so the average load is ",(0,i.kt)("inlineCode",{parentName:"p"},"1/2"),". Candidate B has the lowest average load, at\n",(0,i.kt)("inlineCode",{parentName:"p"},"1/4")," and they get the first seat. Ballots loads are now averaged out, although for the first\niteration, this will not have any effect."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Filled seats: 1 (B)\nOpen Seats: 2\n\nCandidates:   A B C D  L0 L1\n-----------------------------\nVoter V1:       X      0  1/4\nVoter V2:         X X  0  0\nVoter V3:       X   X  0  1/4\nVoter V4:     X X      0  1/4\nVoter V5:       X X X  0  1/4\n")),(0,i.kt)("p",null,"We are now down to candidates ",(0,i.kt)("inlineCode",{parentName:"p"},"A"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"C"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"D")," for two open seats. There is only one voter (",(0,i.kt)("inlineCode",{parentName:"p"},"V4"),")\nfor ",(0,i.kt)("inlineCode",{parentName:"p"},"A"),", with load ",(0,i.kt)("inlineCode",{parentName:"p"},"1/4"),". ",(0,i.kt)("inlineCode",{parentName:"p"},"C")," has two voters, ",(0,i.kt)("inlineCode",{parentName:"p"},"V2")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"V5"),", with loads of ",(0,i.kt)("inlineCode",{parentName:"p"},"0")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"1/4"),". ",(0,i.kt)("inlineCode",{parentName:"p"},"D")," has\nthree voters approving of them, ",(0,i.kt)("inlineCode",{parentName:"p"},"V2"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"V3"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"V5"),", with loads of ",(0,i.kt)("inlineCode",{parentName:"p"},"0"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"1/4"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"1/4"),",\nrespectively."),(0,i.kt)("p",null,"If Candidate ",(0,i.kt)("inlineCode",{parentName:"p"},"A")," wins, the average load would be ",(0,i.kt)("inlineCode",{parentName:"p"},"(1/4 + 1/1) / 1"),", or ",(0,i.kt)("inlineCode",{parentName:"p"},"5/4"),". If candidate ",(0,i.kt)("inlineCode",{parentName:"p"},"C")," wins,\nthe average load would be ",(0,i.kt)("inlineCode",{parentName:"p"},"((0 + 1/2) + (1/4 + 1/2)) / 2"),", or ",(0,i.kt)("inlineCode",{parentName:"p"},"5/8"),". If candidate ",(0,i.kt)("inlineCode",{parentName:"p"},"D")," wins, the\naverage load would be ",(0,i.kt)("inlineCode",{parentName:"p"},"((0 + 1/3) + (1/4 + 1/3) + (1/4 + 1/3)) / 3"),", or ",(0,i.kt)("inlineCode",{parentName:"p"},"1/2"),". Since ",(0,i.kt)("inlineCode",{parentName:"p"},"1/2")," is the\nlowest average load, candidate D wins the second round."),(0,i.kt)("p",null,"Now everybody who voted for Candidate ",(0,i.kt)("inlineCode",{parentName:"p"},"D")," has their load set to the average, ",(0,i.kt)("inlineCode",{parentName:"p"},"1/2")," of all the loads."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Filled seats: 2 (B, D)\nOpen Seats: 1\n\nCandidates:   A B C D  L0 L1  L2\n---------------------------------\nVoter V1:       X      0  1/4 1/4\nVoter V2:         X X  0  0   1/2\nVoter V3:       X   X  0  1/4 1/2\nVoter V4:     X X      0  1/4 1/4\nVoter V5:       X X X  0  1/4 1/2\n")),(0,i.kt)("p",null,"There is now one seat open and two candidates, ",(0,i.kt)("inlineCode",{parentName:"p"},"A")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"C"),". Voter ",(0,i.kt)("inlineCode",{parentName:"p"},"V4")," is the only one voting for\n",(0,i.kt)("inlineCode",{parentName:"p"},"A"),", so if ",(0,i.kt)("inlineCode",{parentName:"p"},"A")," wins then the average load would be ",(0,i.kt)("inlineCode",{parentName:"p"},"(1/4 + 1/1) / 1"),", or ",(0,i.kt)("inlineCode",{parentName:"p"},"5/4"),". Voters ",(0,i.kt)("inlineCode",{parentName:"p"},"V2")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"V5"),"\n(both with load ",(0,i.kt)("inlineCode",{parentName:"p"},"1/2"),") support ",(0,i.kt)("inlineCode",{parentName:"p"},"C"),", so if ",(0,i.kt)("inlineCode",{parentName:"p"},"C")," wins the average load would be\n",(0,i.kt)("inlineCode",{parentName:"p"},"((1/2 + 1/2) + (1/2 + 1/2)) / 2"),", or ",(0,i.kt)("inlineCode",{parentName:"p"},"1"),". Since the average load would be lower with ",(0,i.kt)("inlineCode",{parentName:"p"},"C"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"C")," wins\nthe final seat."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Filled seats: 3 (B, D, C)\nOpen Seats: 0\n\nCandidates:   A B C D  L0 L1  L2  L3\n------------------------------------\nVoter V1:       X      0  1/4 1/4 1/4\nVoter V2:         X X  0  0   1/2 1\nVoter V3:       X   X  0  1/4 1/2 1/2\nVoter V4:     X X      0  1/4 1/4 1/4\nVoter V5:       X X X  0  1/4 1/2 1\n")),(0,i.kt)("p",null,"An interesting characteristic of this calculation is that the total load of all voters will always\nequal the number of seats filled in that round. In the zeroth round, load starts at ",(0,i.kt)("inlineCode",{parentName:"p"},"0")," and there\nare no seats filled. After the first round, the total of all loads is ",(0,i.kt)("inlineCode",{parentName:"p"},"1"),", after the second round it\nis ",(0,i.kt)("inlineCode",{parentName:"p"},"2"),", etc."),(0,i.kt)("h3",{id:"weighted-phragm\xe9n"},"Weighted Phragm\xe9n"),(0,i.kt)("h3",{id:"rationale-1"},"Rationale"),(0,i.kt)("p",null,"While this method works well if all voters have equal weight, this is not the case in Polkadot.\nElections for both validators and candidates for the Polkadot Council are weighted by the number of\ntokens held by the voters. This makes elections more similar to a corporate shareholder election\nthan a traditional political election, where some members have more pull than others. Someone with a\nsingle token will have much less voting power than someone with 100. Although this may seem\nanti-democratic, in a pseudonymous system, it is trivial for someone with 100 tokens to create 100\ndifferent accounts and spread their wealth to all of their pseudonyms."),(0,i.kt)("p",null,"Therefore, not only do we want to allow voters to have their preferences expressed in the result,\nbut do so while keeping as equal a distribution of their stake as possible and express the wishes of\nminorities as much as is possible. The Weighted Phragm\xe9n method allows us to reach these goals."),(0,i.kt)("h3",{id:"algorithm-2"},"Algorithm"),(0,i.kt)("p",null,"Weighted Phragm\xe9n is similar to Basic Phragm\xe9n in that it selects candidates sequentially, one per\nround, until the maximum number of candidates are elected. However, it has additional features to\nalso allocate weight (stake) behind the candidates."),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},'Note: in terms of validator selection, for the following algorithm, you can think of "voters" as\n"nominators" and "candidates" as "validators".')),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},'Candidates are elected, one per round, and added to the set of successful candidates (they have\nwon a "seat"). This aspect of the algorithm is very similar to the "basic Phragm\xe9n" algorithm\ndescribed above.'),(0,i.kt)("li",{parentName:"ol"},"However, as candidates are elected, a weighted mapping is built, defining the weights of each\nselection of a validator by each nominator.")),(0,i.kt)("p",null,"In more depth, the algorithm operates like so:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Create a list of all voters, their total amount of stake, and which validators they support."),(0,i.kt)("li",{parentName:"ol"},"Generate an initial edge-weighted graph mapping from voters to candidates, where each edge weight\nis the total ",(0,i.kt)("em",{parentName:"li"},"potential")," weight (stake) given by that voter. The sum of all potential weight for\na given candidate is called their ",(0,i.kt)("em",{parentName:"li"},"approval stake"),"."),(0,i.kt)("li",{parentName:"ol"},"Now we start electing candidates. For the list of all candidates who have not been elected, get\ntheir score, which is equal to ",(0,i.kt)("inlineCode",{parentName:"li"},"1 / approval_stake"),"."),(0,i.kt)("li",{parentName:"ol"},"For each voter, update the score of each candidate they support by adding their total budget\n(stake) multiplied by the load of the voter and then dividing by that candidate's approval stake\n",(0,i.kt)("inlineCode",{parentName:"li"},"(voter_budget * voter_load / candidate_approval_stake)"),"."),(0,i.kt)("li",{parentName:"ol"},"Determine the candidate with the lowest score and elect that candidate. Remove the elected\ncandidate from the pool of potential candidates."),(0,i.kt)("li",{parentName:"ol"},"The load for each edge connecting to the winning candidate is updated, with the edge load set to\nthe score of the candidate minus the voter's load, and the voter's load then set to the\ncandidate's score."),(0,i.kt)("li",{parentName:"ol"},"If there are more candidates to elect, go to Step 3. Otherwise, continue to step 8."),(0,i.kt)("li",{parentName:"ol"},"Now the stake is distributed amongst each nominator who backed at least one elected candidate.\nThe backing stake for each candidate is calculated by taking the budget of the voter and\nmultiplying by the edge load then dividing by the candidate load\n(",(0,i.kt)("inlineCode",{parentName:"li"},"voter_budget * edge_load / candidate_load"),").")),(0,i.kt)("h3",{id:"example-1"},"Example"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Note: All numbers in this example are rounded off to three decimal places.")),(0,i.kt)("p",null,"In the following example, there are five voters and five candidates vying for three potential seats.\nEach voter ",(0,i.kt)("inlineCode",{parentName:"p"},"V1 - V5")," has an amount of stake equal to their number (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"V1")," has stake of 1, ",(0,i.kt)("inlineCode",{parentName:"p"},"V2"),"\nhas stake of 2, etc.). Every voter is also going to have a ",(0,i.kt)("em",{parentName:"p"},"load,")," which initially starts at ",(0,i.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Filled seats: 0\nOpen Seats: 3\n\nCandidates:    A B C D E  L0\n----------------------------\nVoter V1 (1):  X X        0\nVoter V2 (2):  X X        0\nVoter V3 (3):  X          0\nVoter V4 (4):    X X X    0\nVoter V5 (5):  X     X    0\n")),(0,i.kt)("p",null,"Let us now calculate the approval stake of each of the candidates. Recall that this is merely the\namount of all support for that candidate by all voters."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Candidate A: 1 + 2 + 3 + 5 = 11\nCandidate B: 1 + 2 + 4 = 7\nCandidate C: 4 = 4\nCandidate D: 4 + 5 = 9\nCandidate E: 0\n")),(0,i.kt)("p",null,"The first step is easy - candidate ",(0,i.kt)("inlineCode",{parentName:"p"},"E")," has 0 approval stake and can be ignored from here on out.\nThey will never be elected."),(0,i.kt)("p",null,"We can now calculate the initial scores of the candidates, which is ",(0,i.kt)("inlineCode",{parentName:"p"},"1 / approval_stake"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Candidate A: 1 / 11 = 0.091\nCandidate B: 1 / 7 = 0.143\nCandidate C: 1 / 4 = 0.25\nCandidate D: 1 / 9 = 0.111\nCandidate E: N/A\n")),(0,i.kt)("p",null,"For every edge, we are going to calculate the score, which is current score plus the total budget ","*","\nthe load of the voter divided by the approval stake of the candidate. However, since the load of\nevery voter starts at 0, and anything multiplied by 0 is 0, any addition will be ",(0,i.kt)("inlineCode",{parentName:"p"},"0 / x"),", or 0. This\nmeans that this step can be safely ignored for the initial round."),(0,i.kt)("p",null,"Thus, the best (lowest) score for Round 0 is Candidate A, with a score of ",(0,i.kt)("inlineCode",{parentName:"p"},"0.091"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Candidates:    A B C D E  L0 L1\n----------------------------------\nVoter V1 (1):  X X        0  0.091\nVoter V2 (2):  X X        0  0.091\nVoter V3 (3):  X          0  0.091\nVoter V4 (4):    X X X    0  0\nVoter V5 (5):  X     X    0  0.091\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Filled seats: 1 (A)\nOpen Seats: 2\n\nCandidates:    A B C D E  L0\n----------------------------\nVoter V1 (1):  X X        0\nVoter V2 (2):  X X        0\nVoter V3 (3):  X          0\nVoter V4 (4):    X X X    0\nVoter V5 (5):  X     X    0\n")),(0,i.kt)("p",null,"Candidate ",(0,i.kt)("inlineCode",{parentName:"p"},"A")," is now safe; there is no way that they will lose their seat. Before moving on to the\nnext round, we need to update the scores on the edges of our graph for any candidates who have not\nyet been elected."),(0,i.kt)("p",null,"We elided this detail in the previous round, since it made no difference to the final scores, but we\nshould go into depth here to see how scores are updated. We first must calculate the new loads of\nthe voters, and then calculate the new scores of the candidates."),(0,i.kt)("p",null,"Any voter who had one of their choices for candidate fill the seat in this round (i.e., voters ",(0,i.kt)("inlineCode",{parentName:"p"},"V1"),",\n",(0,i.kt)("inlineCode",{parentName:"p"},"V2"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"V3"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"V5"),", who all voted for ",(0,i.kt)("inlineCode",{parentName:"p"},"A"),") will have their load increased. This load increase will\nblunt the impact of their vote in future rounds, and the edge (which will be used in determining\nstake allocation later) is set to the score of the elected candidate minus the ",(0,i.kt)("em",{parentName:"p"},"current")," voter load."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"edge_load = elected_candidate_score - voter_load\nvoter_load = elected_candidate_score\n")),(0,i.kt)("p",null,"In this instance, the score of the elected candidate is ",(0,i.kt)("inlineCode",{parentName:"p"},"0.091")," and the voter loads are all ",(0,i.kt)("inlineCode",{parentName:"p"},"0"),". So\nfor each voter who voted for ",(0,i.kt)("inlineCode",{parentName:"p"},"A"),", we will calculate a new edge load ",(0,i.kt)("inlineCode",{parentName:"p"},"Voter")," -> ",(0,i.kt)("inlineCode",{parentName:"p"},"A")," of:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Edge load: 0.091 - 0 = 0.091\n")),(0,i.kt)("p",null,"and a new voter load of:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Voter load: 0.091\n")),(0,i.kt)("p",null,"As a reminder, here are the current scores. Loads of the voters are all ",(0,i.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Candidate B : 0.143\nCandidate C : 0.25\nCandidate D : 0.111\n")),(0,i.kt)("p",null,"Now, we go through the weighted graph and update the score of the candidate and the load of the\nedge, using the algorithm:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"candidate_score = candidate_score + ((voter_budget * voter_load) / candidate_approval_stake)\n")),(0,i.kt)("p",null,"Without walking through each step, this gives us the following modifications to the scores of the\ndifferent candidates."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"V1 updates B to 0.156\nV2 updates B to 0.182\nV4 updates B to 0.182\nV4 updates C to 0.25\nV4 updates D to 0.111\nV5 updates D to 0.162\n")),(0,i.kt)("p",null,"After scores are updated, the final scores for the candidates for this round are:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Candidate B: 0.182\nCandidate C: 0.25\nCandidate D: 0.162\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"D"),", with the lowest score, is elected. You will note that even though candidate ",(0,i.kt)("inlineCode",{parentName:"p"},"B")," had more voters\nsupporting them, candidate ",(0,i.kt)("inlineCode",{parentName:"p"},"D")," won the election due to their lower score. This is directly due to\nthe fact that they had the lowest score, of course, but the root reason behind them having a lower\nscore was both the greater amount of stake behind them and that voters who did not get one of their\nchoices in an earlier round (in this example, voter V4) correspond to a higher likelihood of a\ncandidate being elected."),(0,i.kt)("p",null,"We then update the loads for the voters and edges as specified above for any voters who voted for\ncandidate ",(0,i.kt)("inlineCode",{parentName:"p"},"D")," (viz., ",(0,i.kt)("inlineCode",{parentName:"p"},"V4")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"V5"),") using the same formula as above."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Filled seats: 2 (A, D)\nOpen Seats: 1\n\nCandidates:    A B C D E  L0 L1    L2\n-----------------------------------\nVoter V1 (1):  X X        0  0.091 0.091\nVoter V2 (2):  X X        0  0.091 0.091\nVoter V3 (3):  X          0  0.091 0.091\nVoter V4 (4):    X X X    0  0     0.162\nVoter V5 (5):  X     X    0  0.091 0.162\n")),(0,i.kt)("p",null,"Following a similar process for Round 2, we start with initial candidate scores of:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Candidate B : 0.143\nCandidate C : 0.25\n")),(0,i.kt)("p",null,"We can then update the scores of the remaining two candidates according to the algorithm described\nabove."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"V1 updates B to 0.156\nV2 updates B to 0.182\nV4 updates B to 0.274\nV4 updates C to 0.412\n")),(0,i.kt)("p",null,"With the lowest score of ",(0,i.kt)("inlineCode",{parentName:"p"},"0.274"),", Candidate ",(0,i.kt)("inlineCode",{parentName:"p"},"B")," claims the last open seat. Candidates ",(0,i.kt)("inlineCode",{parentName:"p"},"A"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"D"),", and\n",(0,i.kt)("inlineCode",{parentName:"p"},"B")," have been elected, and candidates ",(0,i.kt)("inlineCode",{parentName:"p"},"C")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"E")," are not."),(0,i.kt)("p",null,"Before moving on, we must perform a final load adjustment for the voters and the graph."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Filled seats: 3 (A, D, B)\nOpen Seats: 0\n\nCandidates:    A B C D E  L0 L1    L2    L3\n------------------------------------------\nVoter V1 (1):  X X        0  0.091 0.091 0.274\nVoter V2 (2):  X X        0  0.091 0.091 0.274\nVoter V3 (3):  X          0  0.091 0.091 0.091\nVoter V4 (4):    X X X    0  0     0.162 0.274\nVoter V5 (5):  X     X    0  0.091 0.162 0.162\n")),(0,i.kt)("p",null,"Now we have to determine how much stake every voter should allocate to each candidate. This is done\nby taking the load of the each edge and dividing it by the voter load, then multiplying by the total\nbudget of the voter."),(0,i.kt)("p",null,"In this example, the weighted graph ended up looking like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Nominator: V1\n    Edge to A load= 0.091\n    Edge to B load= 0.183\nNominator: V2\n    Edge to A load= 0.091\n    Edge to B load= 0.183\nNominator: V3\n    Edge to A load= 0.091\nNominator: V4\n    Edge to B load= 0.113\n    Edge to D load= 0.162\nNominator: V5\n    Edge to A load= 0.091\n    Edge to D load= 0.071\n")),(0,i.kt)("p",null,"For instance, the budget of ",(0,i.kt)("inlineCode",{parentName:"p"},"V1")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"1"),", the edge load to ",(0,i.kt)("inlineCode",{parentName:"p"},"A")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"0.091"),", and the voter load is\n",(0,i.kt)("inlineCode",{parentName:"p"},"0.274"),". Using our equation:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"backing_stake (A) = voter_budget * edge_load / voter_load\n")),(0,i.kt)("p",null,"We can fill these variables in with:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"backing_stake (A) = 1 * 0.091 / 0.274 = 0.332\n")),(0,i.kt)("p",null,"For ",(0,i.kt)("inlineCode",{parentName:"p"},"V1")," backing stake of ",(0,i.kt)("inlineCode",{parentName:"p"},"B"),", you can simply replace the edge load value and re-calculate."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"backing_stake (B) = 1 * 0.183 / 0.274 = 0.668\n")),(0,i.kt)("p",null,"Note that the total amount of all backing stake for a given voter will equal the total budget of the\nvoter, unless that voter had no candidates elected, in which case it will be 0."),(0,i.kt)("p",null,"The final results are:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"A is elected with stake 6.807.\nD is elected with stake 4.545.\nB is elected with stake 3.647.\n\nV1 supports: A with stake: 0.332 and B with stake: 0.668.\nV2 supports: A with stake: 0.663 and B with stake: 1.337.\nV3 supports: A with stake: 3.0.\nV4 supports: B with stake: 1.642 and D with stake: 2.358.\nV5 supports: A with stake: 2.813 and D with stake: 2.187.\n")),(0,i.kt)("p",null,"You will notice that the total amount of stake for candidates ",(0,i.kt)("inlineCode",{parentName:"p"},"A"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"D"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"B")," equals (aside from\nrounding errors) the total amount of stake of all the voters (",(0,i.kt)("inlineCode",{parentName:"p"},"1 + 2 + 3 + 4 + 5 = 15"),"). This is\nbecause each voter had at least one of their candidates fill a seat. Any voter whose had none of\ntheir candidates selected will also not have any stake in any of the elected candidates."),(0,i.kt)("h2",{id:"optimizations"},"Optimizations"),(0,i.kt)("p",null,"The results for nominating validators are further optimized for several purposes:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"To reduce the number of edges, i.e. to minimize the number of validators any nominator selects"),(0,i.kt)("li",{parentName:"ol"},"To ensure, as much as possible, an even distribution of stake among the validators"),(0,i.kt)("li",{parentName:"ol"},"Reduce the amount of block computation time")),(0,i.kt)("h3",{id:"high-level-description"},"High-Level Description"),(0,i.kt)("p",null,"After running the weighted Phragm\xe9n algorithm, a process is run that redistributes the vote amongst\nthe elected set. This process will never add or remove an elected candidate from the set. Instead,\nit reduces the variance in the list of backing stake from the voters to the elected candidates.\nPerfect equalization is not always possible, but the algorithm attempts to equalize as much as\npossible. It then runs an edge-reducing algorithm to minimize the number of validators per\nnominator, ideally giving every nominator a single validator to nominate per era."),(0,i.kt)("p",null,"To minimize block computation time, the staking process is run as an\n",(0,i.kt)("a",{parentName:"p",href:"https://substrate.dev/docs/en/knowledgebase/learn-substrate/off-chain-workers"},"off-chain worker"),".\nIn order to give time for this off-chain worker to run, staking commands (bond, nominate, etc.) are\nnot allowed in the last quarter of each era."),(0,i.kt)("p",null,"These optimizations will not be covered in-depth on this page. For more details, you can view the\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/paritytech/substrate/blob/master/frame/elections-phragmen/src/lib.rs"},"Rust implementation of elections in Substrate"),",\nthe\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/paritytech/substrate/blob/master/frame/staking/src/lib.rs"},"Rust implementation of staking in Substrate"),",\nor the ",(0,i.kt)("inlineCode",{parentName:"p"},"seqPhragm\xe9nwithpostprocessing")," method in the\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/w3f/consensus/tree/master/NPoS"},"Python reference implementation"),". If you would\nlike to dive even more deeply, you can review the\n",(0,i.kt)("a",{parentName:"p",href:"https://research.web3.foundation/en/latest/polkadot/NPoS/4.%20Sequential%20Phragm%C3%A9n%E2%80%99s%20method.html"},"W3F Research Page on Sequential Phragm\xe9n Method"),"."),(0,i.kt)("h3",{id:"rationale-for-minimizing-the-number-of-validators-per-nominator"},"Rationale for Minimizing the Number of Validators Per Nominator"),(0,i.kt)("p",null,"Paying out rewards for staking from every validator to all of their nominators can cost a\nnon-trivial amount of chain resources (in terms of space on chain and resources to compute). Assume\na system with 200 validators and 1000 nominators, where each of the nominators has nominated 10\ndifferent validators. Payout would thus require ",(0,i.kt)("inlineCode",{parentName:"p"},"1_000 * 10"),", or 10_000 transactions. In an ideal\nscenario, if every nominator selects a single validator, only 1_000 transactions would need to take\nplace - an order of magnitude fewer. Empirically, network slowdown at the beginning of an era has\noccurred due to the large number of individual payouts by validators to nominators. In extreme\ncases, this could be an attack vector on the system, where nominators nominate many different\nvalidators with small amounts of stake in order to slow the system at the next era change."),(0,i.kt)("p",null,"While this would reduce network and on-chain load, being able to select only a single validator\nincurs some diversification costs. If the single validator that a nominator has nominated goes\noffline or acts maliciously, then the nominator incurs a risk of a significant amount of slashing.\nNominators are thus allowed to nominate up to 16 different validators. However, after the weighted\nedge-reducing algorithm is run, the number of validators per nominator is minimized. Nominators are\nlikely to see themselves nominating a single active validator for an era."),(0,i.kt)("p",null,"At each era change, as the algorithm runs again, nominators are likely to have a different validator\nthan they had before (assuming a significant number of selected validators). Therefore, nominators\ncan diversify against incompetent or corrupt validators causing slashing on their accounts, even if\nthey only nominate a single validator per era."),(0,i.kt)("h3",{id:"rationale-for-maintaining-an-even-distribution-of-stake"},"Rationale for Maintaining an Even Distribution of Stake"),(0,i.kt)("p",null,"Another issue is that we want to ensure that as equal a distribution of votes as possible amongst\nthe elected validators or council members. This helps us increase the security of the system by\nensuring that the minimum amount of tokens in order to join the active validator set or council is\nas high as possible. For example, assume a result of five validators being elected, where validators\nhave the following stake: ",(0,i.kt)("inlineCode",{parentName:"p"},"{1_000, 20, 10, 10, 10}"),', for a total stake of 1_050. In this case, a\npotential attacker could join the active validator set with only 11 tokens, and could obtain a\nmajority of validators with only 33 tokens (since the attacker only has to have enough stake to\n"kick out" the three lowest validators).'),(0,i.kt)("p",null,"In contrast, imagine a different result with the same amount of total stake, but with that stake\nperfectly equally distributed: ",(0,i.kt)("inlineCode",{parentName:"p"},"{210, 210, 210, 210, 210}"),". With the same amount of stake, an\nattacker would need to stake 633 tokens in order to get a majority of validators, a much more\nexpensive proposition. Although obtaining an equal distribution is unlikely, the more equal the\ndistribution, the higher the threshold - and thus the higher the expense - for attackers to gain\nentry to the set."),(0,i.kt)("h3",{id:"rationale-for-reducing-block-computing-time"},"Rationale for Reducing Block Computing Time"),(0,i.kt)("p",null,"Running the Phragm\xe9n algorithm is time-consuming, and often cannot be completed within the time\nlimits of production of a single block. Waiting for calculation to complete would jeopardize the\nconstant block production time of the network. Therefore, as much computation as possible is moved\nto an offchain worker, which validators can work on the problem without impacting block production\ntime. By restricting the ability of users to make any modifications in the last 25% of an era, and\nrunning the selection of validators by nominators as an offchain process, validators have a\nsignificant amount of time to calculate the new active validator set and allocate the nominators in\nan optimal manner."),(0,i.kt)("p",null,'There are several further restrictions put in place to limit the complexity of the election and\npayout. As already mentioned, any given nominator can only select up to 16 validators to nominate.\nConversely, a single validator can have only 256 nominators. A drawback to\nthis is that it is possible, if the number of nominators is very high or the number of validators is\nvery low, that all available validators may be "oversubscribed" and unable to accept more\nnominations. In this case, one may need a larger amount of stake to participate in staking, since\nnominations are priority-ranked in terms of amount of stake.'),(0,i.kt)("h2",{id:"external-resources"},"External Resources"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://arxiv.org/pdf/2004.12990.pdf"},"BalPhragmms")," - W3F research paper that expands on the\nsequential Phragm\xe9n method."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://research.web3.foundation/en/latest/polkadot/NPoS/1.%20Overview.html"},"W3F Research Page on NPoS")," -\nAn overview of Nominated Proof of Stake as its applied to Polkadot."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/w3f/consensus/tree/master/NPoS"},"Python Reference Implementations")," - Python\nimplementations of Simple and Complicated Phragm\xe9n methods."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/paritytech/substrate/blob/master/frame/staking/src/lib.rs"},"Substrate Implementation")," -\nRust implementation used in Substrate."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://arxiv.org/pdf/1611.08826.pdf"},"Phragm\xe9n's and Thiele's Election Methods")," - 95-page paper\nexplaining Phragm\xe9n's election methods in detail."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://aaai.org/ocs/index.php/AAAI/AAAI17/paper/download/14757/13791"},"Phragm\xe9n\u2019s Voting Methods and Justified Representation")," -\nThis paper by Brill ",(0,i.kt)("em",{parentName:"li"},"et al.")," is the source for the simple Phragm\xe9n method, along with proofs about\nits properties."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/kianenigma/offline-phragmen"},"Offline Phragm\xe9n")," - Script to generate the\nPhragm\xe9n validator election outcome before the start of an era.")))}m.isMDXComponent=!0}}]);